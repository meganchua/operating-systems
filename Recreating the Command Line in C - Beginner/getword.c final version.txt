#include "getword.h"
/******************
Megan Chua cssc0025
Carroll CS570
Program 1 Due Date: 9/16/19
References: Foster code from inout2.c

getword() delimits the string on spaces and the following metacharacters: <,>,>>,>>&,|,#,&. If stdin encounters a \ character, it will treat any character following as a normal character part of the string.
******************/
int getword (char * w)
{
    int iochar; //variable that handles what is in getchar()
    int count = 0; //keeps track of the number of characters in the string
    char * word = w; //pointer to the character array
    int meta = 0; //keeps track of how many '>' characters are encountered
    int backslash = 0;
    
    while ((iochar = getchar())!= EOF)
    {
/**********************************************************************************************
If a backslash is encountered, put the next character immediately following into the string and add 1 to the count. Check for case of new line and make sure to add it back to stdin. Check for special cases such as metacharacters and a space to null terminate the end of that string, but add the space or metacharacter to the current string. Otherwise, after hitting the '\', continue on with the rest of the while loop.         
***********************************************************************************************/
    if (iochar == '\\') //this is what initially checks for a '\' character
    {
    	backslash++;
        word[count] = iochar;
        iochar = getchar();
        if (iochar == '\n')
        {
            ungetc(iochar,stdin);
            word[count] = '\0';
            return count;
        }

        if (iochar == '<' || iochar == '>' || iochar == '|' || iochar == '#' || iochar == '&' || iochar == ' ')
        {
            word[count] = iochar;
            count++;
            word[count] = '\0';

            iochar = getchar();
            if (iochar == '<' || iochar == '>' || iochar == '|' || iochar == '#' || iochar == '&')
            {
                ungetc(iochar,stdin);
                break;
            }

            else
            {
                ungetc(iochar,stdin);
                continue;
            }
        }

        else
        {
            word[count] = iochar;
            count++;
        }
    
        word[count] = '\0';
        continue;
              
    }

        word[count] = iochar; //push iochar into the pointer array
        
        if (count == 254) //checks that it doesn't reach max storage, if it does then null terminate the string and add the last char back to stdin
        {
            word[count] = '\0';
            ungetc (iochar,stdin);
            break;
        }
        
        if (word[0] == ' ') //if space encountered at beginning, continue
        {
            continue;
        }

        if (count == 0 && iochar == '\n') //if new line at beginning, return 0
        {
            word[count] = '\0';
            return 0;
        }
/**********************************************************************************************
The next if statement checks for the different cases of '>'. If the pointer encounters a '>' character it must check if another '>' character follows it, then it first checks if the '&' character follows it. If not, then it will return a count of 2 for '>>', or '>&'. Whenever any of these if statements are false, ungetc calls the last character back to stdin.
***********************************************************************************************/
     
        if (meta == 1)
        {
            meta = 0; //set counter for meta back to 0
            if (word[1] == '>')
            {   
                count++;
                word[2] = getchar();
                if(word[2] ==  '&') //checks for >>&
                {
                    word[count+1] = '\0';
                    return 3;
                }
                else //checks for >>
                {
                    ungetc(word[2],stdin);
                    word[count] = '\0';
                    return 2;
                }
                
            }
            if (word[1] == '&') //checks for >&
            {
                word[count+1] = '\0';
                return 2;
            }
            ungetc (iochar,stdin); //else, checks for just >
            word[count] = '\0';
            return count;
        }

        if (word[0] == '>' && backslash == 0) //checks for greater than symbol
        {
            //printf ("hello");
            meta = 1;  
            word[0] = iochar;
            count++;
            continue;
        }

        if ((word[0] == '<' || word[0] == '|' || word[0] == '#' || word[0] == '&') && backslash == 0) //checks for all other metacharacters that occur first in the pointer
        {
            word[count] = iochar;
            word[count+1] = '\0';
            return 1;
        }
 
        if (iochar == ' ') //break at every space
        {
            word[count] = '\0';
            break;
        }

        if (iochar == '<' || iochar == '|' || iochar == '#' || iochar == '&') //checks for the metacharacters that occur at any point in iochar to ensure the string is delimited
        {
            ungetc(iochar,stdin);
            word[count+1] = '\0';
            break;
        }
    
        
        if (iochar == '\n' || iochar == '>') //encounter a new line or a '>' character, puts iochar back into stream
        {
            word[count] = '\0';
            ungetc (iochar, stdin);
            break;
        }

        
        count++;  

    } //end of while loop
 
    if (word[0] == 'd' && word[1] == 'o' && word[2] == 'n' && word[3] == 'e' && (feof(stdin) || word[4] == '\0')) //if the pointer encounters done with a null terminator or EOF ending it, then return -1
    {
        word[count] = '\0';
        ungetc (iochar, stdin);
        return -1;
    }

    if (count > 0)
    {
        word[count] = '\0';
        return count;
    }

    else
    {
        word[count] = '\0';
        return -1;
    }

}
